Spring boot

20200723

JUnit Test
	TestAll 생성 : RunConfiguration에서 Run all tests in the selected project에 해당 프로젝트 설정해주면
	프로젝트 전체에 대한 Test를 실행할 수 있다. 
	각각의 테스트 클래스를 수행해서 통과시킨 후 TestAll도 한번 해서 다른걸 망가트리지 않았는가 검사해야한다.


Spring Data Jpa
	 * Repository에는 extends CrudRepository< T, ID> 하고 interface에서 따로 구현하지는 않아도 된다.
	 * T ( == DTO, Restaurant) 에는 @Entity를 붙여 jpa가 관리가 가능하게 만들고 @Entity가 붙은 객체는 
	 * @Id 가 붙은 Identifier가 필요하다.
	 * Id는 @GeneratedValue로 자동생성이 가능하다.
	 * 
	 * CrudRepository에는 find, findAll, save등이 있다. method명을 여기 맞춰주면 된다.
	 * 
	 * 코드가 매우 깔끔하게 만들어진다.

FrontEnd
	eatgo-api처럼 디렉토리를 분리해서 eatgo-web directory 생성
	node.js설치 후 npm을 이용, npm init 으로 프로젝트 패키지? 생성, json형식으로 되어 있다.
	서버로 사용하는것은 webpack의 webpack-dev-server
	설치는 npm install --save-dev webpack webpack-cli webpack-dev-server 를 terminal에 입력해서 설치
	설치하면 package.js에 관련 dependencies가 입력되고, package-lock.json과 node_modules 생성함
	이는 직접관리하는 자원들은 아니다.
	package.js에서 script에 "start": "webpack-dev-server --port 3000" 를 넣어주면
	npm start로 포트번호 3000을 할당받는 webpack-dev-server를 실행할 수 있다. 여기를 view로 보면 될듯

	FrontEnd와 BackEnd가 분리되어서 source에 접근하지 못하는 문제 : CORS(Cross-origin resource sharing )
	-> 이는 Contorller에 @CrossOrigin 붙이면 Spring이 해결해준다.
	
	fetch로 받는것은 promise로 반환된다. 이에대한 처리들은 async 등을 다시 학습해야겠다.
	--- npm, webpack, javascript:async 등을 좀 더 찾아봐야겠다!	



	Javascript Asynchronous
	- fetch(url) , .json()과 같이 비동기 방식으로 작동하는 것들은 비동기방식으로 처리해줘야한다
	- Vanilla Javascript : async/await, promise(resolve,reject), .then(), callback 이 있다
	- JQuery : $.get(), $.ajax() 등이 있다.

	- async로 선언된 함수 내에서 비동기방식으로 처리해야하는것에는 await를 붙여준다
	- promise : https://joshua1988.github.io/web-development/javascript/promise-for-beginners/
		- promise.then(action) 하면 promise의 resolve가 완료 된 후에 action을 실행한다.
	- .then()은 .fetch(), .ajax()등에 연달아서 쓸 수 있다.
	- callback은 어떤 함수가 비동기로 실행해야 할 때 인자로 넣어줄 수 있따.
		예)
		function createPost( input , callback){
			setTimeOut( ()=>{
				post.push(input);
				callback(); // getPost()
			}
		}


가게 수정
	CRUD 중 UPDATE : PATCH
	HTTP Status : 200
	@Transactional //


Lombok
	Annotation Processor 를 사용해서 코드를 만들어 준다.
	@Getter, @Setter, 
	@Builder -> constructor를 builder로!, args가 추가되더라도 그 순서를 생각치 않아도 되고 쉽다.



Validation
	@Validation - > 스프링이 잘 처리해준다~( BeanValidation이라고 칭하는듯하다)
	HTTP Status 400(Bad Request)
		HTTP Status : 2xx : 성공, // 3xx : redirection // 4xx: 사용자가 뭔가 잘못 // 5xx: 서버내부에러

	Controller의 method의 parameter에 @Valid를 붙여주고(Entity에다가) Entity의 field에 조건 어노테이션 붙이면 된다
		@NotNull , @NotEmpty 등

	Test를 만들 때는 validation 체크를 할 메소드에 대해 valid / invalid 에 해당하는 test를 각각 만들어 줘야한다.

	이전에 스프링코어에서 한 Spring validation
	https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/core.html#validation




에러 처리
	@ControllerAdvice
	
	Service단에서 뭔가 조회등에 실패했을 때 Error를 던져주게 하고( RestaurantNotFound같이 직접 맨들어도댐)
	이를 trt/catch 등으로 잡아서 처리해준다.
		-> try/catch해서 처리해주는걸 @ControllerAdvice 가 쉽게 해준다.
	ErrorAdvice 클래스를 따로 만들고 해당 클래스체 @ControllerAdvice붙이고
	@ExceptionHandler( exception.class) 하면 해당되는 exception은 자동으로 잡아준다.
	Response를 원하는걸 주고싶으면 추가로 @ResponseStatus( status) 를 붙여주면 404등을 되돌려줄수있다.
	status는 header고 body에 content를 되돌려주고싶으면 @ResponseBody 해주고 값 return해주면 된다.



메뉴 관리
	MenuItem add/update/delete
	BulkUpdate(한꺼번에 여러개 업데이트)
	patch, /restaurants/{id}/menuitems ,menuitems를 List(java) / Array(jason)으로 넘긴다.
	HTTP status 200
	save + deleteById 동시에
	verify(class).method( param1, param2) 시 인자가 여러개일 때에는 mathcer를 사용하려면 전부 matcher로 표시해줘야 한다.

	@JsonInclude 


리뷰 작성
	POST, /restaurants/{id}/reviews 

	이전부터 하던건데.. @Mock vs @MockBean
		-> https://www.baeldung.com/java-spring-mockito-mock-mockbean
		Controller에 대한 테스트는 @Runwith와 @WebMvcTest( controller.class)방식으로 클래스를 넣어주는데, 직접 선언하는 것이 아니다.
		그러나 Service에 대한 Test는 MvcTest가 아니고, field로 Service 객체를 선언하는데
		이 때 Service내에서 사용하는것들에 대해 @Mock형태로 선언해주고 initialize를 해줘야한다.
		

프로젝트 분리
	사용자 - 관리자, 고객(endUsers)
		-> admin-api, customer-api , common
	
	common은 admin과 customer가 공통으로 사용하는 domain Layer의 내용이 들어간다.


	
	멀티모듈프로젝트 만들기 -> eclipse에서는 수동으로 해줘야한다.

	eatgo-api -> eatgo-admin-api로 refactor, settings.gradle에도 반영
		***********중요*********
		eclipse에서 그냥 refactor 하면 오류가 난다
		build.gradle에  아래 내용 추가해야 오류안남

			apply plugin: 'eclipse'		
	
			eclipse {
			    project {
			        name = 'eatgo-admin-api'
			    }
			}


	TestAll -> TestAdminApi로 바꿈(모듈단위 테스트)

	이클립스에서는 gradle 모듈을 생성하는 기능이 없으므로 폴더를 만들고 build.gradle을 넣어주고 
	build.gradle에 맞춰서 com.motiveko.eatgo~처럼 패키지 생성해줘야한다.
	그리고 root-project의 settings.gradle에 include 'projectname'해주고 gradle refresh 해주면 생성된다.
	주의할점은 build.gradle에 eclipse 플러긴 넣어주고 프로젝트명 설정까지 다해줘야한다는것이다. 이거 틀리게하면 오류뜨는데 되돌아갈수가없다.

	domain package eatgo-admin-api -> eatgo-common 이동
	admin-api에서 domain이 사라졌기때문에 문제해결을 위해 build.gradle에
		implementation project(':eatgo-common') 라는 dependency를 추가한다.

	
	customer-api 생성 완료
	서버실행 시 포트가 겹쳐 admin-api와 부딪히는데 일단은 해결을 위해 번갈아가며 실행할 예정


	**** admin-api 코드 수정
	Restaurant Controller Test 에서 restaurant 외 reviews나 menuItems 관려 내용 삭제
	Restaurant Service Test에서 restaurant Repository 외 reviewRepo나 menuRepo 내용 삭제, mock들도 삭제하고
	ServiceClass에서도 관련 내용을 지운다
	왜 지우는지 아직 정확히는 모르겠으나 따로 구현한다고한다.
	관리자쪽에서는 메뉴아이템 따로 요청해서 MenuItemList등을 따로 처리하게 하고.
	일반사용자는 가게정보 요청시 메뉴아이템까지 한꺼번에 받아오게한다. 서로 다르게 기능을 사용한다.
	
	관리자는 리뷰쓸일이 없기때문에 addReview 테스트에서 지운다.


	**** customer-api 코드수정
	customer는 menuItem 관리할 일이 없으므로 관련 class 과감히 삭제	
	review작성 관련 내용은 사용자가 사용하므로 그대로 두기
	restaurant관련 
	 상세보기 시 메뉴,리뷰 정보 얻기 필요하므로 둔다.	
	 create, update는 할 일 없으므로 삭제

	
	cmd를 활용한 gradle
	./gradlew {명령어}
	./gradlew build -> 빌드
	test -> 테스드
	assemble -> jar파일생성
	--stop -> 종료

	Run Config에서 Gradle로 TestAll 생성 ( task : test)
	그냥 test하면 uptodate뜨면서 한번 테스트한것들은 캐시에 저장하고 그냥 지나가는데 정확히 테스트하기 위해
	test앞에 task:clean을 추가해주면 clean한번 하고 테스트한다.
	

	
	진짜 영속화 : Persistence!
	 H2 Database(FileMode)
	 admin, customer가 같은 데이터를 활용하게 한다.
 	 test와 개발할 때, 그리고 실제 서비스 할 때 다른 설정을 가지고 처리할 수 있게 Profiles를 활용한다.

 
	참고 ) cmd로 사용중인 포트 확인 및 프로세스 죽이기
		https://lee-mandu.tistory.com/346?category=707937

	application.properties -> appliction.yml로 변환 (YAML 형식, XML의 변형)
		x.y1 = z1 x.y2 = z2 이런식으로 가던걸 x: y1:z1 y2:z2 형식으로 표현가능하다.
		
	h2를 fileMode로 쓰기 위해 application.yml에 설정해줘야한다.
	jdbc:h2:~~파일경로~~	

	h2 database는 filemode 시 두개의 application에서 하나의 파일에 접근할 수 없다.
	따라서 포트를 나눠서 사용하지 않고 admin과 customer를 따로 실행한다 ㅜ ㅜ
	나중에 mysql, maria db를 사용하면 다 해결 가능하다.
	
	applictaion.yml은 admin과 customer가 내용이 완전ㅇ히 같은걸 쓴다.
	
	느낀점@!!!
	나는 db를 설계하지 않고 쿼리도 안짰는데 JPA가 알아서 h2에 entity값대로 데이터를 저장해준다!
	그리고 restaurant-menuItems같이 쿼리를 쓰자면 join이나 subquery로 해야 하는 것들도 자바로 다 처리가 되었다!?!?
	
스프링 부트 EATGO 집에서..

	h2의 파일 모드는 동시에 여러개의 application의 접근이 불가능한데, 그러면 개발중 테스트를 할 때 계속 꺼줘야하는 불편함이 생긴다
	해결을 위해 profiles 를 이용해서 분리사용이 가능하다.(테스트시 memory모드로)
	spring:
  	 profiles: test
    	 datasource:
    	    url: jdbc:h2:mem:test

	실행 시  환경변수를 써준다. : SPRING_PROFILES_ACTIVE=test ./gradlew test

	현재 나의 cmd에서는 SPRING_PROFILES_ACTIVE=test 가 먹히지 않아서 runconfig-VMArguments에다가 
	-Dspring.profiles.active=test 를 추가해주고 돌려야한다(gradle로 하는 test all에서는 이것도 안댄다 ㅜㅜㅜ,Junit만 가능)
	강사는 run config에 gradle내에 환경변수 설정에다가 SPRING_PROFILES_ACTIVE=test를 써줬는데 이클립스에는 그딴게없다 ㅡㅜ


가게목록 필터링
	지역별, 종류별( Regions, Categories)
					
	regions	- > Address Contains Region -> JPA :: findAllByAddressContaining() , address가 ~를 포함하고 있는것을 찾아쥰다.
					          ::	 findAllByAddressStartingWith() , address가 ~로 시작하는거
		admin : GET/regions, POST/regions
		customer : GET/regions
	categories
		admin : GET/categories, POST/categories
		customer : GET/categories

	H2 Console -> db에 직접 접근해서 수정등을 한다. -> localhost:8090/h2-console 하면 접속이 된다!!!!!!!!

	localhost:8090/restaurants?region=서울  과 같은 방식으로 찾을 수 있게한다.(region에 들어가는 값들은 /regions로 받아오고 ui에서 입력할수있게!)
	
	Restaurant에 categoryId 추가, -> 테이블에 스키마가 수정된다. (yml파일에 ddl-auto: update로 인해 앱이 실행될 때 마다 갱신된다)
	Region역시도 RegionId를 Restaurant에 추가해서 검색하는게 훨씬 빠르다. 현업에서도 거의 그렇게한다. 그냥 보여줄려고 containing들어가는걸 쓴거다

	https://kimyhcj.tistory.com/294
	************* CRUDRepository가 findAllByAddressContaining 같은것들도 만들어 주는 것 같은데 아마 method의 네이밍 규칙이 있는듯하다
	************* CRUDRepository 역시 Interface일 뿐인데 method의 구현이 어떻게 이뤄지는지 알아보자. JPA도 interface일텐데...
	************* Mocking이란 given같은걸로 mock 객체들이 뭔가 내줄거라고 가정하게 하는것ㄷ인가.

	************* findAllByAddressContainingAndCategoryId로 address는 포함, categoryId는 일치하는걸 준다. 역시나 구현은 필요없다!!
	
	************* ************* ************* ************* 
	CategoryId는 @NotNull 인데 null이 가능하다.. 우째이런일이..?
	->> @NotNull이 Validator것이 아니었다.. Validator로 바꾸니까 오류뜨기 시작함. 수정해야할듯!!!!! 
	************* ************* ************* ************* 
 	--> JPA에서는 null이면 안된다고 거르는데 h2console에서 쿼리 직접짤땐 괜찮다. 컬럼이 isNullable=Yes로 되어있다 ㅜ,ㅡ



사용자 관리

	User - email(id) , name, level(0: 삭제된 사용자, 1 : 일반사용자, 2: 가게주인, 3: 관리자)
	사용자 관리 기능 - admin-api
	isAdmin, isActive 



회원가입
	Password -> Hashing ( BCrypt 방식, 단일방향 암호화) -> SpringSecurity로! 
	HttpSecurity
	
	Spring Security 의존성을 추가하면 홈으로 이동 시 로그인페이지가뜬다. 그러나 우리는 Api Server를 만드는것이므로 불필요하다.
		-> Configuration 추가 필요(~~XmlConfig or ~JavaConfig) :: http.formLogin().disable();
	
	iframe :: https://terms.naver.com/entry.nhn?docId=2065768&cid=50305&categoryId=50305
		/h2-console에서 connect하면 보여지는 화면은 iframe인데 이것도 보안상 이슈가 있어 spring security에서 막는다!
		따라서 이부분도 설정 필요 -> http.headers().frameOptions().disable();
	그 외.. 뭔진잘모름
		http.csrf().disable();
		http.cors().disable();//cross origin~~
		

	기본설정 후 회원가입 API 생성
	-> customer-api에다가 생성할것이다.
	POST, Email, Name, Password, status 201
	이메일 중복검사 : db에 email로 user찾기 findByemail(email) -> Optional.isPresent()로 판단


인증 (Authentication)
	POST, /session
	accessToken : 나는 아까 아뒤비번 입력한 사람입니다를 알려줄 수 있다, 사용자를 구분할 수 있다.옛날방법

	SessionRequest/Response DTO 생성
		
	ResponseEntity에 body에 dto객체 넣어주면 알아서 Json형식으로 바꿔준다.
	
	PasswordEncoder : 회원 등록할때 쓰는데 Userservice에서 authenticate할 때도 쓴다. 이거는 SecurityConfig에다가 Bean으로 등록해주고 DI하는 방식으로 바꿈
			->>> 그런데, Bean으로 등록만 하고 Autowired해주진 않았는데 왜 주입이 되는것인가
			->>> Repository도 (이거는 CRUDRepository가 AutoConfig되는듯하다) Autowired하지 않았는데 주입되었따.
			-->>>>>> :: https://www.baeldung.com/constructor-injection-in-spring
			-->>>>>> :: spring 4.3부터는  Implicit Constructor Injection 이 되기때문에 constructor방식에서는 @Autowired가 필요없다!!!!!!

			
	accessToken은 원래 다른방식으로 해야하는데 우리는 암호화된 password의 일부를 활용한다.	
	
	accessToken을 원래 방식으로 하면 매번 db에 들어가서 사용자 정보를 읽어야한다
		--> JWT를 활용해 개선할것이다



JWT
	https://jwt.io/
	Json Web Tokens -> Json포맷을 이용해서 웹에서 활용할 수 있는 AccessToken을 다루는 표준
	우리가 한거보다 훨씬 더 유의미하고 적절한 데이터를 가진 토큰! 표준이다!
	3Part - > 
		Header(형식 등), 
		Payload(데이터들 : Claims, id,emaile등과 토큰유효기간등이 담긴다. 우리는 유효기간 안담지만 실제로는 무조건 담는다!
			 암호화 안되므로 노출되면 안되는 데이터를 담으면 안된다, 가능한 적게담으자), 
		Signature(위변조 안되있음을 증명하는 서명, 해싱(sigining)한 후 값을 대조하는방식(verification).)
	Base64Encoding을 이용해서 전체 데이터를 일정한 문자열로 바꾸고 .로 연결되있다.
	HMAC-SHA256(HS-256) 해싱 방법을 이용해 signiture를 만든다. 비밀키를 정하고 잘 간직해야한다. 노출되면 남들이 똑같은 서명을 만들 수 잇따 ㅜ


	jjwt ::  https://github.com/jwtk/jjwt
	 - securityJavaConfig에다가 Bean생성
	 - secret값은 application.yml에 선언해놓는다
	 - @Value("${jwt.secret}") Annotation으로 받아와서 빈을 생성할 때 넣어준

Eatgo 구현을 위해 필요한 추가 기술
	- Google maps API 
		- 다중 마커
	- Amazon AWS EC2(배포)
	- Bootstrap
	- database :: MySQL or Oracle